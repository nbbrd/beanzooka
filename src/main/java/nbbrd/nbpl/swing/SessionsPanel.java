/*
 * Copyright 2018 National Bank of Belgium
 * 
 * Licensed under the EUPL, Version 1.1 or - as soon they will be approved 
 * by the European Commission - subsequent versions of the EUPL (the "Licence");
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at:
 * 
 * http://ec.europa.eu/idabc/eupl
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the Licence is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and 
 * limitations under the Licence.
 */
package nbbrd.nbpl.swing;

import ec.util.desktop.Desktop;
import ec.util.desktop.DesktopManager;
import ec.util.table.swing.JTables;
import ec.util.various.swing.JCommand;
import java.io.File;
import javax.swing.JMenu;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import nbbrd.nbpl.core.App;
import nbbrd.nbpl.core.Config;
import nbbrd.nbpl.core.UserDir;

/**
 *
 * @author Philippe Charles
 */
public class SessionsPanel extends javax.swing.JPanel {

    private final SessionTableModel sessionModel;

    private final Desktop desktop;
    private final OpenWorkingDir openWorkingDir;
    private final OpenLogs openLogs;

    public SessionsPanel() {
        initComponents();

        this.sessionModel = new SessionTableModel();

        this.desktop = DesktopManager.get();
        this.openWorkingDir = new OpenWorkingDir(desktop);
        this.openLogs = new OpenLogs(desktop);

        sessions.setModel(sessionModel);
        sessions.setDefaultRenderer(SwingWorker.StateValue.class, JTables.cellRendererOf(Renderers::renderState));
        sessions.setDefaultRenderer(App.class, JTables.cellRendererOf(Renderers::renderApp));
        sessions.setDefaultRenderer(Config.class, JTables.cellRendererOf(Renderers::renderConfig));
        sessions.setDefaultRenderer(File.class, JTables.cellRendererOf(Renderers::renderFolder));
        sessions.setComponentPopupMenu(getSessionsMenu().getPopupMenu());
        SwingUtil.onDoubleClick(sessions, openWorkingDir);
        JTables.setWidthAsPercentages(sessions, .10, .15, .15, .60);
    }

    public void add(Session session) {
        sessionModel.add(session);
    }

    private JMenu getSessionsMenu() {
        JMenu result = new JMenu();
        result.add(openWorkingDir.toAction(sessions)).setText("Open user dir location");
        result.add(openLogs.toAction(sessions)).setText("Open logs location");
        return result;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        sessions = new javax.swing.JTable();

        jLabel3.setText("Sessions:");

        sessions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(sessions);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable sessions;
    // End of variables declaration//GEN-END:variables

    @lombok.RequiredArgsConstructor
    private static final class OpenWorkingDir extends JCommand<JTable> {

        private final Desktop desktop;

        @Override
        public void execute(JTable c) throws Exception {
            Session session = ((SessionTableModel) c.getModel()).getRow(c.getSelectedRow());
            desktop.showInFolder(session.getWorkingDir());
        }

        @Override
        public boolean isEnabled(JTable c) {
            return c.getSelectedRowCount() == 1 && desktop.isSupported(Desktop.Action.SHOW_IN_FOLDER);
        }

        @Override
        public JCommand.ActionAdapter toAction(JTable c) {
            return super.toAction(c).withWeakListSelectionListener(c.getSelectionModel());
        }
    }

    @lombok.RequiredArgsConstructor
    private static final class OpenLogs extends JCommand<JTable> {

        private final Desktop desktop;

        @Override
        public void execute(JTable c) throws Exception {
            Session session = ((SessionTableModel) c.getModel()).getRow(c.getSelectedRow());
            desktop.showInFolder(UserDir.resolveLogFile(session.getWorkingDir()));
        }

        @Override
        public boolean isEnabled(JTable c) {
            return c.getSelectedRowCount() == 1 && desktop.isSupported(Desktop.Action.SHOW_IN_FOLDER);
        }

        @Override
        public JCommand.ActionAdapter toAction(JTable c) {
            return super.toAction(c).withWeakListSelectionListener(c.getSelectionModel());
        }
    }
}
