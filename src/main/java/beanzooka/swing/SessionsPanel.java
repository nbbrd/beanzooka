/*
 * Copyright 2018 National Bank of Belgium
 *
 * Licensed under the EUPL, Version 1.1 or - as soon they will be approved
 * by the European Commission - subsequent versions of the EUPL (the "Licence");
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at:
 *
 * http://ec.europa.eu/idabc/eupl
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Licence is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and
 * limitations under the Licence.
 */
package beanzooka.swing;

import beanzooka.core.App;
import beanzooka.core.Jdk;
import beanzooka.core.UserDir;
import ec.util.grid.swing.XTable;
import ec.util.table.swing.JTables;
import ec.util.various.swing.JCommand;
import internal.swing.ShowInFolderCommand;
import internal.swing.SwingUtil;

import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * @author Philippe Charles
 */
public final class SessionsPanel extends javax.swing.JPanel {

    public static final String OPEN_WORKING_DIR_ACTION = "openWorkingDir";
    public static final String OPEN_LOGS_ACTION = "openLogs";
    public static final String RELAUNCH_ACTION = "relaunch";

    private final SessionTableModel sessionModel;

    public SessionsPanel() {
        this.sessionModel = new SessionTableModel();
        initComponents();
        initComponents2();
    }

    public boolean isRunning() {
        return sessionModel.isRunning();
    }

    public void add(Session session) {
        sessionModel.add(session);
        int rowIndex = sessionModel.getRowCount() - 1;
        sessions.getSelectionModel().setSelectionInterval(rowIndex, rowIndex);
    }

    private void initComponents2() {
        sessions.setModel(sessionModel);

        OpenWorkingDir openWorkingDir = new OpenWorkingDir();
        getActionMap().put(OPEN_WORKING_DIR_ACTION, openWorkingDir.toAction(sessions));

        OpenLogs openLogs = new OpenLogs();
        getActionMap().put(OPEN_LOGS_ACTION, openLogs.toAction(sessions));

        Relaunch relaunch = new Relaunch();
        getActionMap().put(RELAUNCH_ACTION, relaunch.toAction(sessions));

        ((XTable) sessions).setNoDataRenderer(new XTable.DefaultNoDataRenderer(""));
        sessions.setDefaultRenderer(SwingWorker.StateValue.class, JTables.cellRendererOf(Renderers::renderState));
        sessions.setDefaultRenderer(App.class, JTables.cellRendererOf(Renderers::renderApp));
        sessions.setDefaultRenderer(Jdk.class, JTables.cellRendererOf(Renderers::renderJdk));
        sessions.setDefaultRenderer(File.class, JTables.cellRendererOf(Renderers::renderFolder));
        sessions.setComponentPopupMenu(getSessionsMenu().getPopupMenu());
        SwingUtil.onDoubleClick(sessions, openWorkingDir);
        JTables.setWidthAsPercentages(sessions, .10, .15, .15, .60);
    }

    private JMenu getSessionsMenu() {
        ActionMap am = getActionMap();
        JMenu result = new JMenu();
        result.add(am.get(OPEN_WORKING_DIR_ACTION)).setText("Open user dir location");
        result.add(am.get(OPEN_LOGS_ACTION)).setText("Open logs location");
        result.add(am.get(RELAUNCH_ACTION)).setText("Relaunch");
        return result;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        sessions = new ec.util.grid.swing.XTable();

        jLabel3.setText("Sessions:");

        sessions.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{

                }
        ));
        jScrollPane2.setViewportView(sessions);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable sessions;
    // End of variables declaration//GEN-END:variables

    private static final class OpenWorkingDir extends ShowInFolderCommand<JTable> {

        @Override
        protected Optional<File> getFile(JTable c) {
            return c.getSelectedRowCount() == 1
                    ? Optional.of(((SessionTableModel) c.getModel()).getRow(c.getSelectedRow()).getWorkingDir())
                    : Optional.empty();
        }

        @Override
        public JCommand.ActionAdapter toAction(JTable c) {
            return super.toAction(c)
                    .withWeakListSelectionListener(c.getSelectionModel());
        }
    }

    private static final class OpenLogs extends ShowInFolderCommand<JTable> {

        @Override
        protected Optional<File> getFile(JTable c) {
            return c.getSelectedRowCount() == 1
                    ? Optional.of(((SessionTableModel) c.getModel()).getRow(c.getSelectedRow()).getWorkingDir()).map(UserDir::resolveLogFile)
                    : Optional.empty();
        }

        @Override
        public JCommand.ActionAdapter toAction(JTable c) {
            return super.toAction(c)
                    .withWeakListSelectionListener(c.getSelectionModel());
        }
    }

    private static final class Relaunch extends JCommand<JTable> {

        @Override
        public boolean isEnabled(JTable c) {
            return c.getSelectedRowCount() == 1
                    && ((SessionTableModel) c.getModel()).getRow(c.getSelectedRow()).getState() == SwingWorker.StateValue.DONE;
        }

        @Override
        public void execute(JTable c) throws Exception {
            ((SessionTableModel) c.getModel()).getRow(c.getSelectedRow()).execute();
        }

        @Override
        public JCommand.ActionAdapter toAction(JTable c) {
            return super.toAction(c)
                    .withWeakTableModelListener(c.getModel())
                    .withWeakListSelectionListener(c.getSelectionModel());
        }
    }

    private static final class SessionTableModel extends AbstractTableModel {

        private final List<Session> list = new ArrayList<>();

        public boolean isRunning() {
            return list.stream()
                    .anyMatch(session -> !session.getState().equals(SwingWorker.StateValue.DONE));
        }

        public void add(Session session) {
            final int index = list.size();
            list.add(session);
            session.addPropertyChangeListener(o -> fireTableRowsUpdated(index, index));
            fireTableRowsInserted(index, index);
        }

        public Session getRow(int rowIndex) {
            return list.get(rowIndex);
        }

        @Override
        public int getRowCount() {
            return list.size();
        }

        @Override
        public int getColumnCount() {
            return 4;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Session session = getRow(rowIndex);
            switch (columnIndex) {
                case 0:
                    return session.getState();
                case 1:
                    return session.getConfiguration().getApp();
                case 2:
                    return session.getConfiguration().getJdk();
                case 3:
                    return session.getWorkingDir();
            }
            return null;
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return "State";
                case 1:
                    return "App";
                case 2:
                    return "Jdk";
                case 3:
                    return "User dir";
            }
            return super.getColumnName(column);
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return SwingWorker.StateValue.class;
                case 1:
                    return App.class;
                case 2:
                    return Jdk.class;
                case 3:
                    return File.class;
            }
            return super.getColumnClass(columnIndex);
        }
    }
}
